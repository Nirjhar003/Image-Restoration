import cv2
import numpy as np

def add_salt_and_pepper_noise(image, salt_prob, pepper_prob):
    """
    Add salt and pepper noise to an image.
    
    Parameters:
        image (numpy.ndarray): Original image.
        salt_prob (float): Probability of salt noise (bright pixels).
        pepper_prob (float): Probability of pepper noise (dark pixels).
        
    Returns:
        numpy.ndarray: Noisy image.
    """
    noisy_image = np.copy(image)
    total_pixels = image.size // image.shape[2]
    
    # Add salt noise (white pixels)
    num_salt = int(np.ceil(salt_prob * total_pixels))
    salt_coords = [np.random.randint(0, i - 1, num_salt) for i in image.shape]
    noisy_image[salt_coords[0], salt_coords[1], :] = 255

    # Add pepper noise (black pixels)
    num_pepper = int(np.ceil(pepper_prob * total_pixels))
    pepper_coords = [np.random.randint(0, i - 1, num_pepper) for i in image.shape]
    noisy_image[pepper_coords[0], pepper_coords[1], :] = 0

    return noisy_image

# Load the image
image_path = r"C:\Users\nirjh\Downloads\OIP.jpg"  # Use raw string to handle backslashes
image = cv2.imread(image_path, cv2.IMREAD_COLOR)

# Check if the image was loaded successfully
if image is None:
    print("Error: Could not load image. Please check the file path.")
else:
    # Add salt and pepper noise to the image
    salt_prob = 0.02  # Probability of salt noise
    pepper_prob = 0.02  # Probability of pepper noise
    noisy_image = add_salt_and_pepper_noise(image, salt_prob, pepper_prob)

    # Apply median filtering to remove salt and pepper noise
    filtered_image = cv2.medianBlur(noisy_image, 5)  # Kernel size of 5x5

    # Display the original, noisy, and filtered images
    cv2.imshow("Original Image", image)
    cv2.imshow("Noisy Image", noisy_image)
    cv2.imshow("Filtered Image", filtered_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
